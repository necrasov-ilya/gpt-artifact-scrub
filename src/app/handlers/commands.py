from __future__ import annotations

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message

from ...modules.images.domain.models import EmojiGridOption
from ...modules.images.services.user_settings import UserSettingsService
from ...modules.shared.services.usage_stats import UsageStatsService

START_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—á—ë—Å—ã–≤–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Å–≤–µ–∂–∏–µ –∫–∞—Å—Ç–æ–º-—ç–º–æ–¥–∑–∏."
    "\n\n–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∞–±–∑–∞—Ü ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–ª—é —Ç–∏—Ä–µ –∏ –∫–∞–≤—ã—á–∫–∏, —É–±–µ—Ä—É —Å–ª—É–∂–µ–±–Ω—ã–π –º—É—Å–æ—Ä –∏ –≤–µ—Ä–Ω—É —á–∏—Å—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç."
    "\n–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî –ø–æ–¥–±–µ—Ä—É —Å–µ—Ç–∫—É –ø–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º, –ø–æ–º–æ–≥—É —Å padding, –Ω–∞—Ä–µ–∂—É PNG –∏ –∑–∞–≥—Ä—É–∂—É –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞–∫."
    "\n\n–•–æ—á–µ—Ç—Å—è –¥–µ—Ç–∞–ª–µ–π ‚Äî –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ /help."
)

HELP_TEXT = (
    "üßπ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
    "–Ø –≤—ã–ø—Ä–∞–≤–ª—è—é —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É, –≤—ã—á–∏—â–∞—é LLM-—Ç–æ–∫–µ–Ω—ã –∏ –ø—Ä–∏—Å—ã–ª–∞—é –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á—ë—Ç –æ —Ç–æ–º, —á—Ç–æ –ø–æ–º–µ–Ω—è–ª–æ—Å—å. –ù–∏–∫–∞–∫–∏—Ö —Ñ–∞–Ω—Ç–∞–∑–∏–π ‚Äî —Ç–æ–ª—å–∫–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–∞—è –ø—Ä–∞–≤–∫–∞.\n\n"
    "üß© –≠–º–æ–¥–∑–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
    "–ö–∏–Ω—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî —è –æ—Ü–µ–Ω—é —Ä–∞–∑–º–µ—Ä—ã, –ø—Ä–µ–¥–ª–æ–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ç–æ–∫ –∏ –ø–æ–ø—Ä–æ—à—É –≤—ã–±—Ä–∞—Ç—å padding –æ—Ç 0 –¥–æ 5 –ø–∏–∫—Å–µ–ª–µ–π."
    " –¢–∞–π–ª—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ PNG 100√ó100 –∏ —Å–æ–∑–¥–∞–º –Ω–æ–≤—ã–π –∫–∞—Å—Ç–æ–º-–ø–∞–∫. –ü—Ä–µ–º–∏—É–º –≤ Telegram –≤—Å—ë –µ—â—ë –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –∑–∞—Ç–æ –∫–∞–∂–¥—ã–π –∞–ø–ª–æ–∞–¥ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –±–µ–∑ –º—É—Å–æ—Ä–∞.\n\n"
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–µ—Ä–≤–∏—Å\n"
    "–ö–æ–º–∞–Ω–¥–∞ /settings grid=RxC pad=N —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞—à –ª—é–±–∏–º—ã–π –ø—Ä–µ—Å–µ—Ç. –ï—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∏—Ç–æ–∫ –Ω–∞–¥–æ –∑–∞—Ä–∞–Ω–µ–µ, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é EMOJI_GRID_TILE_CAP –≤ .env."
    " –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –∂–∏–≤—É—Ç –Ω–µ–¥–æ–ª–≥–æ –∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∞ –ø—Ä–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö —è –≤–µ–∂–ª–∏–≤–æ –ø—Ä–æ—à—É —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É. –ù—É–∂–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Äî /logs –ø—Ä–∏—à–ª—ë—Ç —Å–≤–µ–∂–∏–µ –∑–∞–ø–∏—Å–∏ –∂—É—Ä–Ω–∞–ª–∞."
)


def _get_command_args(command: CommandObject | None) -> str:
    if command is None or not command.args:
        return ""
    return command.args.strip()


def _parse_key_value_args(args: str) -> dict[str, str]:
    parts: dict[str, str] = {}
    for token in args.split():
        if "=" in token:
            key, value = token.split("=", 1)
            parts[key.lower()] = value
    return parts


def create_commands_router(user_settings: UserSettingsService, usage_stats: UsageStatsService) -> Router:
    router = Router(name="commands")

    @router.message(Command("start"))
    async def start(message: Message) -> None:
        await message.answer(START_TEXT)

    @router.message(Command("help"))
    async def help_cmd(message: Message) -> None:
        await message.answer(HELP_TEXT)

    @router.message(Command("settings"))
    async def settings_cmd(message: Message, command: CommandObject) -> None:
        user_id = message.from_user.id
        args = _get_command_args(command)
        if not args:
            settings = await user_settings.get(user_id)
            await message.answer(
                "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"‚Ä¢ –°–µ—Ç–∫–∞: {settings.default_grid.as_label()}\n"
                f"‚Ä¢ Padding: {settings.default_padding}px\n\n"
                "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å: /settings grid=3x3 pad=2",
            )
            return
        parts = _parse_key_value_args(args)
        errors = []
        grid_value = parts.get("grid")
        pad_value = parts.get("pad")
        if not grid_value and not pad_value:
            errors.append("–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: grid=RxC –∏–ª–∏ pad=N")
        new_grid = None
        if grid_value:
            try:
                new_grid = EmojiGridOption.decode(grid_value)
                if new_grid.tiles > user_settings.grid_limit:
                    raise ValueError
            except Exception:
                errors.append(
                    f"–°–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2x2, 3x4 –∏ —Ç.–¥. –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {user_settings.grid_limit} —Ç–∞–π–ª–æ–≤."
                )
        padding = None
        if pad_value:
            try:
                padding_int = int(pad_value)
                if not 0 <= padding_int <= 5:
                    raise ValueError
                padding = padding_int
            except Exception:
                errors.append("Padding —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 0‚Äì5")
        if errors:
            await message.answer("\n".join(errors))
            return
        current = await user_settings.get(user_id)
        updated_grid = new_grid or current.default_grid
        updated_padding = padding if padding is not None else current.default_padding
        try:
            await user_settings.update(user_id, updated_grid, updated_padding)
        except ValueError:
            await message.answer(
                f"–°–µ—Ç–∫–∞ —Å {updated_grid.tiles} —Ç–∞–π–ª–∞–º–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {user_settings.grid_limit}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç."
            )
            return
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ! –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
            f"‚Ä¢ –°–µ—Ç–∫–∞: {updated_grid.as_label()}\n"
            f"‚Ä¢ Padding: {updated_padding}px"
        )

    @router.message(Command("logs"))
    async def logs_cmd(message: Message, command: CommandObject) -> None:
        args = _get_command_args(command)
        page = 1
        if args:
            try:
                page = max(1, int(args.split()[0]))
            except ValueError:
                await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: /logs 2")
                return

        stats_page = await usage_stats.get_page(page)
        if stats_page.total_users == 0:
            await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—É—Ç –ø–µ—Ä–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã.")
            return

        lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"–í—Å–µ–≥–æ: {stats_page.total_events}"]
        start_rank = (stats_page.page - 1) * usage_stats.page_size + 1
        for index, entry in enumerate(stats_page.entries, start=start_rank):
            lines.append(f"{index}. {entry.label} ‚Äî {entry.total_count}")
        lines.append("")
        lines.append(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {stats_page.page} –∏–∑ {stats_page.pages}")
        await message.answer("\n".join(lines))

    return router
