from __future__ import annotations

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message

from ...modules.images.domain.models import EmojiGridOption
from ...modules.images.services.user_settings import UserSettingsService
from ...modules.shared.services.usage_stats import UsageStatsService

START_TEXT = (
    "ü§ñ –†–∞–±–æ—Ç–∞—é —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ‚Äî —è –≤–µ—Ä–Ω—É –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
    "üìù –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç: —É–±–∏—Ä–∞—é –ø—Ä–∏–∑–Ω–∞–∫–∏ –ò–ò ‚Äî –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ –º–µ–Ω—è—é –Ω–∞ \"-\", –∫–∞–≤—ã—á–∫–∏ –Ω–∞ \"\", —Å–ø–∏—Å–∫–∏ –Ω–∞ \"-\", —É–¥–∞–ª—è—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –æ—Ç GPT –≤—Ä–æ–¥–µ [cite], (turn0search1) –∏ —Ç.–ø.\n\n"
    "üñºÔ∏è –ï—Å–ª–∏ —Ñ–æ—Ç–æ: –æ—Ü–µ–Ω–∏–≤–∞—é —Ä–∞–∑–º–µ—Ä—ã, –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–µ—Ç–∫—É, –ø—Ä–æ—à—É –≤—ã–±—Ä–∞—Ç—å padding (0‚Äì5 px). –¢–∞–π–ª—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ PNG 100√ó100 –∏ —Å–æ–±–∏—Ä–∞—é –Ω–æ–≤—ã–π –∫–∞—Å—Ç–æ–º-–ø–∞–∫. –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–∞ —É –≤–∞—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ Telegram Premium.\n\n"
    "üîí –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –Ω–∞—à–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —É—Å–ª—É–≥\n\n"
    "üí¨ –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî @mentsev"
)

HELP_TEXT = (
    "ü§ñ –†–∞–±–æ—Ç–∞—é —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ‚Äî —è –≤–µ—Ä–Ω—É –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
    "üìù –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç: —É–±–∏—Ä–∞—é –ø—Ä–∏–∑–Ω–∞–∫–∏ –ò–ò ‚Äî –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ –º–µ–Ω—è—é –Ω–∞ \"-\", –∫–∞–≤—ã—á–∫–∏ –Ω–∞ \"\", —Å–ø–∏—Å–∫–∏ –Ω–∞ \"-\", —É–¥–∞–ª—è—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –æ—Ç GPT –≤—Ä–æ–¥–µ [cite], (turn0search1) –∏ —Ç.–ø.\n\n"
    "üñºÔ∏è –ï—Å–ª–∏ —Ñ–æ—Ç–æ: –æ—Ü–µ–Ω–∏–≤–∞—é —Ä–∞–∑–º–µ—Ä—ã, –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–µ—Ç–∫—É, –ø—Ä–æ—à—É –≤—ã–±—Ä–∞—Ç—å padding (0‚Äì5 px). –¢–∞–π–ª—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ PNG 100√ó100 –∏ —Å–æ–±–∏—Ä–∞—é –Ω–æ–≤—ã–π –∫–∞—Å—Ç–æ–º-–ø–∞–∫. –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–∞ —É –≤–∞—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ Telegram Premium.\n\n"
    "üîí –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –Ω–∞—à–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —É—Å–ª—É–≥\n\n"
    "üí¨ –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî @mentsev"
)


def _get_command_args(command: CommandObject | None) -> str:
    if command is None or not command.args:
        return ""
    return command.args.strip()


def _parse_key_value_args(args: str) -> dict[str, str]:
    parts: dict[str, str] = {}
    for token in args.split():
        if "=" in token:
            key, value = token.split("=", 1)
            parts[key.lower()] = value
    return parts


def _is_logs_whitelisted(user_id: int | None, whitelist: frozenset[int]) -> bool:
    # Enforce strict whitelist: if whitelist is empty, deny everyone
    if not whitelist:
        return False
    if user_id is None:
        return False
    return user_id in whitelist


def create_commands_router(
    user_settings: UserSettingsService,
    usage_stats: UsageStatsService,
    logs_whitelist_ids: set[int] | None = None,
) -> Router:
    router = Router(name="commands")
    allowed_logs_users = frozenset(logs_whitelist_ids or set())

    @router.message(Command("start"))
    async def start(message: Message) -> None:
        await message.answer(START_TEXT)

    @router.message(Command("help"))
    async def help_cmd(message: Message) -> None:
        await message.answer(HELP_TEXT)

    @router.message(Command("settings"))
    async def settings_cmd(message: Message, command: CommandObject) -> None:
        user_id = message.from_user.id
        args = _get_command_args(command)
        if not args:
            settings = await user_settings.get(user_id)
            await message.answer(
                "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"‚Ä¢ –°–µ—Ç–∫–∞: {settings.default_grid.as_label()}\n"
                f"‚Ä¢ Padding: {settings.default_padding}px\n\n"
                "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å: /settings grid=3x3 pad=2",
            )
            return
        parts = _parse_key_value_args(args)
        errors = []
        grid_value = parts.get("grid")
        pad_value = parts.get("pad")
        if not grid_value and not pad_value:
            errors.append("–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: grid=RxC –∏–ª–∏ pad=N")
        new_grid = None
        if grid_value:
            try:
                new_grid = EmojiGridOption.decode(grid_value)
                if new_grid.tiles > user_settings.grid_limit:
                    raise ValueError
            except Exception:
                errors.append(
                    f"–°–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2x2, 3x4 –∏ —Ç.–¥. –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {user_settings.grid_limit} —Ç–∞–π–ª–æ–≤."
                )
        padding = None
        if pad_value:
            try:
                padding_int = int(pad_value)
                if not 0 <= padding_int <= 5:
                    raise ValueError
                padding = padding_int
            except Exception:
                errors.append("Padding —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 0‚Äì5")
        if errors:
            await message.answer("\n".join(errors))
            return
        current = await user_settings.get(user_id)
        updated_grid = new_grid or current.default_grid
        updated_padding = padding if padding is not None else current.default_padding
        try:
            await user_settings.update(user_id, updated_grid, updated_padding)
        except ValueError:
            await message.answer(
                f"–°–µ—Ç–∫–∞ —Å {updated_grid.tiles} —Ç–∞–π–ª–∞–º–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {user_settings.grid_limit}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç."
            )
            return
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ! –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
            f"‚Ä¢ –°–µ—Ç–∫–∞: {updated_grid.as_label()}\n"
            f"‚Ä¢ Padding: {updated_padding}px"
        )

    @router.message(Command("logs"))
    async def logs_cmd(message: Message, command: CommandObject) -> None:
        user_id = message.from_user.id if message.from_user else None
        # If user is not whitelisted, do nothing (remain silent)
        if not _is_logs_whitelisted(user_id, allowed_logs_users):
            return

        args = _get_command_args(command)
        page = 1
        if args:
            try:
                page = max(1, int(args.split()[0]))
            except ValueError:
                await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: /logs 2")
                return

        stats_page = await usage_stats.get_page(page)
        if stats_page.total_users == 0:
            await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—É—Ç –ø–µ—Ä–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã.")
            return

        lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"–í—Å–µ–≥–æ: {stats_page.total_events}"]
        start_rank = (stats_page.page - 1) * usage_stats.page_size + 1
        for index, entry in enumerate(stats_page.entries, start=start_rank):
            lines.append(f"{index}. {entry.label} ‚Äî {entry.total_count}")
        lines.append("")
        lines.append(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {stats_page.page} –∏–∑ {stats_page.pages}")
        await message.answer("\n".join(lines))

    return router
