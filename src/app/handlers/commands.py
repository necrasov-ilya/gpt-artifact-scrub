from __future__ import annotations

from aiogram import F, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message

from ...modules.images.services.user_settings import UserSettingsService
from ...modules.images.utils.image import padding_level_to_pixels
from ...modules.shared.services.usage_stats import UsageStatsService

START_TEXT_TEMPLATE = (
    "ü§ñ –†–∞–±–æ—Ç–∞—é —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ‚Äî —è –≤–µ—Ä–Ω—É –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
    "üìù –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç: —É–±–∏—Ä–∞—é –ø—Ä–∏–∑–Ω–∞–∫–∏ –ò–ò ‚Äî –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ –º–µ–Ω—è—é –Ω–∞ \"-\", –∫–∞–≤—ã—á–∫–∏ –Ω–∞ \"\", —Å–ø–∏—Å–∫–∏ –Ω–∞ \"-\", —É–¥–∞–ª—è—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –æ—Ç GPT –≤—Ä–æ–¥–µ [cite], (turn0search1) –∏ —Ç.–ø.\n\n"
    "üñºÔ∏è –ï—Å–ª–∏ —Ñ–æ—Ç–æ: —Å–º–æ—Ç—Ä—é –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞—é —É–¥–æ–±–Ω—É—é —Å–µ—Ç–∫—É –∏ –Ω–∞—Ä–µ–∑–∞—é –∫–∞—Ä—Ç–∏–Ω–∫—É. –û—Ç—Å—Ç—É–ø—ã –¥–æ–±–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –ø–æ –∫—Ä–∞—è–º –∏ –±–µ—Ä—É –∏–∑ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Ä–æ–≤–µ–Ω—å {default_padding}). –ì–æ—Ç–æ–≤—ã–π –ø–∞–∫ –∑–∞–≥—Ä—É–∂–∞—é –≤ Telegram (–Ω—É–∂–µ–Ω Premium). –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /padding, –Ω–∞–ø—Ä–∏–º–µ—Ä /padding 2 (—É–º–µ—Ä–µ–Ω–Ω–∞—è —Ä–∞–º–∫–∞).\n\n"
    "–ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å \"/padding\" –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ‚Äî —è –ø–æ–∫–∞–∂—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –≥—Ä–∞–¥–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π.\n\n"
    "üîí –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –Ω–∞—à–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —É—Å–ª—É–≥\n\n"
    "üí¨ –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî @mentsev"
)

HELP_TEXT_TEMPLATE = START_TEXT_TEMPLATE


def _get_command_args(command: CommandObject | None) -> str:
    if command is None or not command.args:
        return ""
    return command.args.strip()


def _parse_key_value_args(args: str) -> dict[str, str]:
    parts: dict[str, str] = {}
    for token in args.split():
        if "=" not in token:
            continue
        key, value = token.split("=", 1)
        key = key.strip().lower()
        value = value.strip()
        if key:
            parts[key] = value
    return parts


def _is_logs_admin(user_id: int | None, admins: frozenset[int]) -> bool:
    # Enforce strict whitelist: if whitelist is empty, deny everyone
    if not admins:
        return False
    if user_id is None:
        return False
    return user_id in admins


def create_commands_router(
    user_settings: UserSettingsService,
    usage_stats: UsageStatsService,
    *,
    tile_size: int,
    default_padding: int,
    admin_user_ids: set[int] | None = None,
) -> Router:
    router = Router(name="commands")
    allowed_log_admins = frozenset(admin_user_ids or set())

    @router.message(Command("start"))
    async def start(message: Message) -> None:
        # Record the start event so user appears in logs
        await usage_stats.record_event(message.from_user)
        await message.answer(START_TEXT_TEMPLATE.format(default_padding=default_padding))

    @router.message(Command("help"))
    async def help_cmd(message: Message) -> None:
        await message.answer(HELP_TEXT_TEMPLATE.format(default_padding=default_padding))

    @router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    async def help_text(message: Message) -> None:
        await message.answer(HELP_TEXT_TEMPLATE.format(default_padding=default_padding))

    @router.message(Command("padding"))
    async def padding_cmd(message: Message, command: CommandObject) -> None:
        user_id = message.from_user.id
        args = _get_command_args(command)
        settings = await user_settings.get(user_id)
        current_level = settings.default_padding
        current_px = padding_level_to_pixels(current_level, tile_size)
        if not args:
            levels = []
            for level in range(0, 6):
                px = padding_level_to_pixels(level, tile_size)
                desc = (
                    "–Ω–µ—Ç —Ä–∞–º–∫–∏" if level == 0 else
                    "–æ—á–µ–Ω—å —Ç–æ–Ω–∫–∞—è" if level == 1 else
                    "—É–º–µ—Ä–µ–Ω–Ω–∞—è" if level == 2 else
                    "–∑–∞–º–µ—Ç–Ω–∞—è" if level == 3 else
                    "—à–∏—Ä–æ–∫–∞—è" if level == 4 else
                    "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è"
                )
                levels.append(f"{level} ‚Äî {desc} (~{px}px)")

            await message.answer(
                "–¢–µ–∫—É—â–∏–π padding:\n"
                f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {current_level}\n"
                f"‚Ä¢ –û—Ç—Å—Ç—É–ø –ø–æ –∫—Ä–∞—è–º: ‚âà{current_px}px\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:\n"
                + "\n".join(levels)
                + "\n\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ 0..5: /padding 3",
            )
            return
        # Only accept a single numeric token: /padding N
        tokens = args.split()
        if len(tokens) != 1 or not tokens[0].isdigit():
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /padding N, –≥–¥–µ N ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 0..5.")
            return
        new_level = int(tokens[0])
        if not 0 <= new_level <= 5:
            await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã —É—Ä–æ–≤–Ω–∏ –æ—Ç 0 –¥–æ 5.")
            return
        if new_level == current_level:
            await message.answer("Padding —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å.")
            return
        await user_settings.update(user_id, settings.default_grid, new_level)
        new_px = padding_level_to_pixels(new_level, tile_size)
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ! Padding –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {new_level}\n"
            f"‚Ä¢ –û—Ç—Å—Ç—É–ø –ø–æ –∫—Ä–∞—è–º: ‚âà{new_px}px"
        )

    @router.message(Command("logs"))
    async def logs_cmd(message: Message, command: CommandObject) -> None:
        user_id = message.from_user.id if message.from_user else None
        # If user is not whitelisted, do nothing (remain silent)
        if not _is_logs_admin(user_id, allowed_log_admins):
            return

        args = _get_command_args(command)
        page = 1
        if args:
            try:
                page = max(1, int(args.split()[0]))
            except ValueError:
                await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: /logs 2")
                return

        stats_page = await usage_stats.get_page(page)
        if stats_page.total_users == 0:
            await message.answer(
                "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—É—Ç –ø–µ—Ä–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã."
            )
            return

        lines = [
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_page.total_users}",
            f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats_page.total_events}",
        ]
        start_rank = (stats_page.page - 1) * usage_stats.page_size + 1
        for index, entry in enumerate(stats_page.entries, start=start_rank):
            msg_count = entry.message_count
            msg_text = f"{msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π" if msg_count != 0 else "–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
            lines.append(f"{index}. {entry.label} ‚Äî {msg_text}")
        lines.append("")
        lines.append(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {stats_page.page} –∏–∑ {stats_page.pages}")
        await message.answer("\n".join(lines))

    return router
