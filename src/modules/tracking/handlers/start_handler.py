"""
Handler for /start command with tracking payload.
"""
from aiogram import Router
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from src.modules.tracking.services.tracking_service import TrackingService


def create_start_handler_router(
    tracking_service: TrackingService,
    bot_username: str
) -> Router:
    """
    Create router for /start command with tracking.
    
    Intercepts /start commands with deep link payloads for tracking purposes.
    Regular /start commands without payloads are handled by commands router.
    """
    router = Router(name="tracking_start")
    
    @router.message(CommandStart(deep_link=True))
    async def handle_tracking_start(message: Message, command: CommandObject) -> None:
        """Handle /start with deep link payload."""
        user = message.from_user
        if not user:
            return
        
        payload = command.args if command and command.args else None
        if not payload:
            return
        
        result = await tracking_service.handle_start(payload, user.id)
        
        if not result:
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            )
            return
        
        link, is_first_start = result
        
        external_url = f"https://t.me/{bot_username}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", url=external_url)]
        ])
        
        if is_first_start:
            text = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                f"–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ: **{link.tag}**\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º."
            )
        else:
            text = (
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n"
                f"–°—Å—ã–ª–∫–∞: **{link.tag}**\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
            )
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    
    return router
